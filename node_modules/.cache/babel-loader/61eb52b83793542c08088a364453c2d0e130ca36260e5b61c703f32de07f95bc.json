{"ast":null,"code":"import _slicedToArray from \"/Users/gowtham/Documents/GitHub/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/gowtham/Documents/GitHub/portfolio/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { isString, defaults, isEasingGenerator, defaultOffset, fillOffset, progress } from '@motionone/utils';\nimport { resolveOption } from '../utils/stagger.es.js';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { withControls } from '../animate/utils/controls.es.js';\nimport { keyframesList } from '../animate/utils/keyframes.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { resolveElements } from '../utils/resolve-elements.es.js';\nimport { calcNextTime } from './utils/calc-time.es.js';\nimport { addKeyframes } from './utils/edit.es.js';\nimport { compareByTime } from './utils/sort.es.js';\nimport { Animation } from '@motionone/animation';\nfunction timeline(definition) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a;\n  var animationDefinitions = createAnimationsFromTimeline(definition, options);\n  /**\n   * Create and start animations\n   */\n  var animationFactories = animationDefinitions.map(function (definition) {\n    return animateStyle.apply(void 0, _toConsumableArray(definition).concat([Animation]));\n  }).filter(Boolean);\n  return withControls(animationFactories, options,\n  // Get the duration from the first animation definition\n  (_a = animationDefinitions[0]) === null || _a === void 0 ? void 0 : _a[3].duration);\n}\nfunction createAnimationsFromTimeline(definition) {\n  var _a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a$defaultOptions = _a.defaultOptions,\n    defaultOptions = _a$defaultOptions === void 0 ? {} : _a$defaultOptions,\n    timelineOptions = __rest(_a, [\"defaultOptions\"]);\n  var animationDefinitions = [];\n  var elementSequences = new Map();\n  var elementCache = {};\n  var timeLabels = new Map();\n  var prevTime = 0;\n  var currentTime = 0;\n  var totalDuration = 0;\n  /**\n   * Build the timeline by mapping over the definition array and converting\n   * the definitions into keyframes and offsets with absolute time values.\n   * These will later get converted into relative offsets in a second pass.\n   */\n  for (var i = 0; i < definition.length; i++) {\n    var segment = definition[i];\n    /**\n     * If this is a timeline label, mark it and skip the rest of this iteration.\n     */\n    if (isString(segment)) {\n      timeLabels.set(segment, currentTime);\n      continue;\n    } else if (!Array.isArray(segment)) {\n      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n      continue;\n    }\n    var _segment = _slicedToArray(segment, 3),\n      elementDefinition = _segment[0],\n      keyframes = _segment[1],\n      _segment$ = _segment[2],\n      options = _segment$ === void 0 ? {} : _segment$;\n    /**\n     * If a relative or absolute time value has been specified we need to resolve\n     * it in relation to the currentTime.\n     */\n    if (options.at !== undefined) {\n      currentTime = calcNextTime(currentTime, options.at, prevTime, timeLabels);\n    }\n    /**\n     * Keep track of the maximum duration in this definition. This will be\n     * applied to currentTime once the definition has been parsed.\n     */\n    var maxDuration = 0;\n    /**\n     * Find all the elements specified in the definition and parse value\n     * keyframes from their timeline definitions.\n     */\n    var elements = resolveElements(elementDefinition, elementCache);\n    var numElements = elements.length;\n    for (var elementIndex = 0; elementIndex < numElements; elementIndex++) {\n      var element = elements[elementIndex];\n      var elementSequence = getElementSequence(element, elementSequences);\n      for (var key in keyframes) {\n        var valueSequence = getValueSequence(key, elementSequence);\n        var valueKeyframes = keyframesList(keyframes[key]);\n        var valueOptions = getOptions(options, key);\n        var _valueOptions$duratio = valueOptions.duration,\n          duration = _valueOptions$duratio === void 0 ? defaultOptions.duration || defaults.duration : _valueOptions$duratio,\n          _valueOptions$easing = valueOptions.easing,\n          easing = _valueOptions$easing === void 0 ? defaultOptions.easing || defaults.easing : _valueOptions$easing;\n        if (isEasingGenerator(easing)) {\n          invariant(key === \"opacity\" || valueKeyframes.length > 1, \"spring must be provided 2 keyframes within timeline()\");\n          var custom = easing.createAnimation(valueKeyframes, key !== \"opacity\", function () {\n            return 0;\n          }, key);\n          easing = custom.easing;\n          valueKeyframes = custom.keyframes || valueKeyframes;\n          duration = custom.duration || duration;\n        }\n        var delay = resolveOption(options.delay, elementIndex, numElements) || 0;\n        var startTime = currentTime + delay;\n        var targetTime = startTime + duration;\n        /**\n         *\n         */\n        var _valueOptions = valueOptions,\n          _valueOptions$offset = _valueOptions.offset,\n          offset = _valueOptions$offset === void 0 ? defaultOffset(valueKeyframes.length) : _valueOptions$offset;\n        /**\n         * If there's only one offset of 0, fill in a second with length 1\n         *\n         * TODO: Ensure there's a test that covers this removal\n         */\n        if (offset.length === 1 && offset[0] === 0) {\n          offset[1] = 1;\n        }\n        /**\n         * Fill out if offset if fewer offsets than keyframes\n         */\n        var remainder = offset.length - valueKeyframes.length;\n        remainder > 0 && fillOffset(offset, remainder);\n        /**\n         * If only one value has been set, ie [1], push a null to the start of\n         * the keyframe array. This will let us mark a keyframe at this point\n         * that will later be hydrated with the previous value.\n         */\n        valueKeyframes.length === 1 && valueKeyframes.unshift(null);\n        /**\n         * Add keyframes, mapping offsets to absolute time.\n         */\n        addKeyframes(valueSequence, valueKeyframes, easing, offset, startTime, targetTime);\n        maxDuration = Math.max(delay + duration, maxDuration);\n        totalDuration = Math.max(targetTime, totalDuration);\n      }\n    }\n    prevTime = currentTime;\n    currentTime += maxDuration;\n  }\n  /**\n   * For every element and value combination create a new animation.\n   */\n  elementSequences.forEach(function (valueSequences, element) {\n    for (var _key in valueSequences) {\n      var _valueSequence = valueSequences[_key];\n      /**\n       * Arrange all the keyframes in ascending time order.\n       */\n      _valueSequence.sort(compareByTime);\n      var _keyframes = [];\n      var valueOffset = [];\n      var valueEasing = [];\n      /**\n       * For each keyframe, translate absolute times into\n       * relative offsets based on the total duration of the timeline.\n       */\n      for (var _i = 0; _i < _valueSequence.length; _i++) {\n        var _valueSequence$_i = _valueSequence[_i],\n          at = _valueSequence$_i.at,\n          value = _valueSequence$_i.value,\n          _easing = _valueSequence$_i.easing;\n        _keyframes.push(value);\n        valueOffset.push(progress(0, totalDuration, at));\n        valueEasing.push(_easing || defaults.easing);\n      }\n      /**\n       * If the first keyframe doesn't land on offset: 0\n       * provide one by duplicating the initial keyframe. This ensures\n       * it snaps to the first keyframe when the animation starts.\n       */\n      if (valueOffset[0] !== 0) {\n        valueOffset.unshift(0);\n        _keyframes.unshift(_keyframes[0]);\n        valueEasing.unshift(\"linear\");\n      }\n      /**\n       * If the last keyframe doesn't land on offset: 1\n       * provide one with a null wildcard value. This will ensure it\n       * stays static until the end of the animation.\n       */\n      if (valueOffset[valueOffset.length - 1] !== 1) {\n        valueOffset.push(1);\n        _keyframes.push(null);\n      }\n      animationDefinitions.push([element, _key, _keyframes, Object.assign(Object.assign(Object.assign({}, defaultOptions), {\n        duration: totalDuration,\n        easing: valueEasing,\n        offset: valueOffset\n      }), timelineOptions)]);\n    }\n  });\n  return animationDefinitions;\n}\nfunction getElementSequence(element, sequences) {\n  !sequences.has(element) && sequences.set(element, {});\n  return sequences.get(element);\n}\nfunction getValueSequence(name, sequences) {\n  if (!sequences[name]) sequences[name] = [];\n  return sequences[name];\n}\nexport { createAnimationsFromTimeline, timeline };","map":{"version":3,"names":["__rest","invariant","isString","defaults","isEasingGenerator","defaultOffset","fillOffset","progress","resolveOption","animateStyle","withControls","keyframesList","getOptions","resolveElements","calcNextTime","addKeyframes","compareByTime","Animation","timeline","definition","options","_a","animationDefinitions","createAnimationsFromTimeline","animationFactories","map","filter","Boolean","duration","defaultOptions","timelineOptions","elementSequences","Map","elementCache","timeLabels","prevTime","currentTime","totalDuration","i","length","segment","set","Array","isArray","name","at","elementDefinition","keyframes","undefined","maxDuration","elements","numElements","elementIndex","element","elementSequence","getElementSequence","key","valueSequence","getValueSequence","valueKeyframes","valueOptions","easing","custom","createAnimation","delay","startTime","targetTime","offset","remainder","unshift","Math","max","forEach","valueSequences","sort","valueOffset","valueEasing","value","push","Object","assign","sequences","has","get"],"sources":["/Users/gowtham/Documents/GitHub/portfolio/node_modules/@motionone/dom/dist/timeline/index.es.js"],"sourcesContent":["import { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { isString, defaults, isEasingGenerator, defaultOffset, fillOffset, progress } from '@motionone/utils';\nimport { resolveOption } from '../utils/stagger.es.js';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { withControls } from '../animate/utils/controls.es.js';\nimport { keyframesList } from '../animate/utils/keyframes.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { resolveElements } from '../utils/resolve-elements.es.js';\nimport { calcNextTime } from './utils/calc-time.es.js';\nimport { addKeyframes } from './utils/edit.es.js';\nimport { compareByTime } from './utils/sort.es.js';\nimport { Animation } from '@motionone/animation';\n\nfunction timeline(definition, options = {}) {\n    var _a;\n    const animationDefinitions = createAnimationsFromTimeline(definition, options);\n    /**\n     * Create and start animations\n     */\n    const animationFactories = animationDefinitions\n        .map((definition) => animateStyle(...definition, Animation))\n        .filter(Boolean);\n    return withControls(animationFactories, options, \n    // Get the duration from the first animation definition\n    (_a = animationDefinitions[0]) === null || _a === void 0 ? void 0 : _a[3].duration);\n}\nfunction createAnimationsFromTimeline(definition, _a = {}) {\n    var { defaultOptions = {} } = _a, timelineOptions = __rest(_a, [\"defaultOptions\"]);\n    const animationDefinitions = [];\n    const elementSequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the definition array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */\n    for (let i = 0; i < definition.length; i++) {\n        const segment = definition[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */\n        if (isString(segment)) {\n            timeLabels.set(segment, currentTime);\n            continue;\n        }\n        else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        const [elementDefinition, keyframes, options = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */\n        if (options.at !== undefined) {\n            currentTime = calcNextTime(currentTime, options.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */\n        let maxDuration = 0;\n        /**\n         * Find all the elements specified in the definition and parse value\n         * keyframes from their timeline definitions.\n         */\n        const elements = resolveElements(elementDefinition, elementCache);\n        const numElements = elements.length;\n        for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\n            const element = elements[elementIndex];\n            const elementSequence = getElementSequence(element, elementSequences);\n            for (const key in keyframes) {\n                const valueSequence = getValueSequence(key, elementSequence);\n                let valueKeyframes = keyframesList(keyframes[key]);\n                const valueOptions = getOptions(options, key);\n                let { duration = defaultOptions.duration || defaults.duration, easing = defaultOptions.easing || defaults.easing, } = valueOptions;\n                if (isEasingGenerator(easing)) {\n                    invariant(key === \"opacity\" || valueKeyframes.length > 1, \"spring must be provided 2 keyframes within timeline()\");\n                    const custom = easing.createAnimation(valueKeyframes, key !== \"opacity\", () => 0, key);\n                    easing = custom.easing;\n                    valueKeyframes = custom.keyframes || valueKeyframes;\n                    duration = custom.duration || duration;\n                }\n                const delay = resolveOption(options.delay, elementIndex, numElements) || 0;\n                const startTime = currentTime + delay;\n                const targetTime = startTime + duration;\n                /**\n                 *\n                 */\n                let { offset = defaultOffset(valueKeyframes.length) } = valueOptions;\n                /**\n                 * If there's only one offset of 0, fill in a second with length 1\n                 *\n                 * TODO: Ensure there's a test that covers this removal\n                 */\n                if (offset.length === 1 && offset[0] === 0) {\n                    offset[1] = 1;\n                }\n                /**\n                 * Fill out if offset if fewer offsets than keyframes\n                 */\n                const remainder = offset.length - valueKeyframes.length;\n                remainder > 0 && fillOffset(offset, remainder);\n                /**\n                 * If only one value has been set, ie [1], push a null to the start of\n                 * the keyframe array. This will let us mark a keyframe at this point\n                 * that will later be hydrated with the previous value.\n                 */\n                valueKeyframes.length === 1 && valueKeyframes.unshift(null);\n                /**\n                 * Add keyframes, mapping offsets to absolute time.\n                 */\n                addKeyframes(valueSequence, valueKeyframes, easing, offset, startTime, targetTime);\n                maxDuration = Math.max(delay + duration, maxDuration);\n                totalDuration = Math.max(targetTime, totalDuration);\n            }\n        }\n        prevTime = currentTime;\n        currentTime += maxDuration;\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */\n    elementSequences.forEach((valueSequences, element) => {\n        for (const key in valueSequences) {\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */\n            valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */\n            for (let i = 0; i < valueSequence.length; i++) {\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || defaults.easing);\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */\n            if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(\"linear\");\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */\n            if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            animationDefinitions.push([\n                element,\n                key,\n                keyframes,\n                Object.assign(Object.assign(Object.assign({}, defaultOptions), { duration: totalDuration, easing: valueEasing, offset: valueOffset }), timelineOptions),\n            ]);\n        }\n    });\n    return animationDefinitions;\n}\nfunction getElementSequence(element, sequences) {\n    !sequences.has(element) && sequences.set(element, {});\n    return sequences.get(element);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name])\n        sequences[name] = [];\n    return sequences[name];\n}\n\nexport { createAnimationsFromTimeline, timeline };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}