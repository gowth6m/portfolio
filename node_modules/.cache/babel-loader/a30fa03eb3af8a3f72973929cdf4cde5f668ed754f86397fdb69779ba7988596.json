{"ast":null,"code":"import _objectSpread from \"/Users/gowtham/Documents/GitHub/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\nvar clampRgbUnit = function clampRgbUnit(v) {\n  return clamp(0, 255, v);\n};\nvar rgbUnit = _objectSpread(_objectSpread({}, number), {}, {\n  transform: function transform(v) {\n    return Math.round(clampRgbUnit(v));\n  }\n});\nvar rgba = {\n  test: isColorString(\"rgb\", \"red\"),\n  parse: splitColor(\"red\", \"green\", \"blue\"),\n  transform: function transform(_ref) {\n    var red = _ref.red,\n      green = _ref.green,\n      blue = _ref.blue,\n      _ref$alpha = _ref.alpha,\n      alpha$1 = _ref$alpha === void 0 ? 1 : _ref$alpha;\n    return \"rgba(\" + rgbUnit.transform(red) + \", \" + rgbUnit.transform(green) + \", \" + rgbUnit.transform(blue) + \", \" + sanitize(alpha.transform(alpha$1)) + \")\";\n  }\n};\nexport { rgbUnit, rgba };","map":{"version":3,"names":["clamp","number","alpha","sanitize","isColorString","splitColor","clampRgbUnit","v","rgbUnit","transform","Math","round","rgba","test","parse","red","green","blue","alpha$1"],"sources":["/Users/gowtham/Documents/GitHub/portfolio/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs"],"sourcesContent":["import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,0BAA0B;AAChD,SAASC,MAAM,EAAEC,KAAK,QAAQ,sBAAsB;AACpD,SAASC,QAAQ,QAAQ,cAAc;AACvC,SAASC,aAAa,EAAEC,UAAU,QAAQ,aAAa;AAEvD,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,CAAC;EAAA,OAAKP,KAAK,CAAC,CAAC,EAAE,GAAG,EAAEO,CAAC,CAAC;AAAA;AAC5C,IAAMC,OAAO,mCACNP,MAAM;EACTQ,SAAS,EAAE,mBAACF,CAAC;IAAA,OAAKG,IAAI,CAACC,KAAK,CAACL,YAAY,CAACC,CAAC,CAAC,CAAC;EAAA;AAAA,EAChD;AACD,IAAMK,IAAI,GAAG;EACTC,IAAI,EAAET,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC;EACjCU,KAAK,EAAET,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC;EACzCI,SAAS,EAAE;IAAA,IAAGM,GAAG,QAAHA,GAAG;MAAEC,KAAK,QAALA,KAAK;MAAEC,IAAI,QAAJA,IAAI;MAAA,kBAAEf,KAAK;MAAEgB,OAAO,2BAAG,CAAC;IAAA,OAAO,OAAO,GAC5DV,OAAO,CAACC,SAAS,CAACM,GAAG,CAAC,GACtB,IAAI,GACJP,OAAO,CAACC,SAAS,CAACO,KAAK,CAAC,GACxB,IAAI,GACJR,OAAO,CAACC,SAAS,CAACQ,IAAI,CAAC,GACvB,IAAI,GACJd,QAAQ,CAACD,KAAK,CAACO,SAAS,CAACS,OAAO,CAAC,CAAC,GAClC,GAAG;EAAA;AACX,CAAC;AAED,SAASV,OAAO,EAAEI,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}