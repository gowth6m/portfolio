{"ast":null,"code":"import _objectWithoutProperties from \"/Users/gowtham/Documents/GitHub/myportfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/gowtham/Documents/GitHub/myportfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"keyframes\", \"restSpeed\", \"restDelta\"];\nimport { findSpring, calcAngularFreq } from './find-spring.mjs';\nimport { velocityPerSecond } from '../../utils/velocity-per-second.mjs';\nvar durationKeys = [\"duration\", \"bounce\"];\nvar physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n  return keys.some(function (key) {\n    return options[key] !== undefined;\n  });\n}\nfunction getSpringOptions(options) {\n  var springOptions = _objectSpread({\n    velocity: 0.0,\n    stiffness: 100,\n    damping: 10,\n    mass: 1.0,\n    isResolvedFromDuration: false\n  }, options);\n  // stiffness/damping/mass overrides duration/bounce\n  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {\n    var derived = findSpring(options);\n    springOptions = _objectSpread(_objectSpread(_objectSpread({}, springOptions), derived), {}, {\n      velocity: 0.0,\n      mass: 1.0\n    });\n    springOptions.isResolvedFromDuration = true;\n  }\n  return springOptions;\n}\nvar velocitySampleDuration = 5;\n/**\n * This is based on the spring implementation of Wobble https://github.com/skevy/wobble\n */\nfunction spring(_ref) {\n  var keyframes = _ref.keyframes,\n    _ref$restSpeed = _ref.restSpeed,\n    restSpeed = _ref$restSpeed === void 0 ? 2 : _ref$restSpeed,\n    _ref$restDelta = _ref.restDelta,\n    restDelta = _ref$restDelta === void 0 ? 0.01 : _ref$restDelta,\n    options = _objectWithoutProperties(_ref, _excluded);\n  var origin = keyframes[0];\n  var target = keyframes[keyframes.length - 1];\n  /**\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n   * to reduce GC during animation.\n   */\n  var state = {\n    done: false,\n    value: origin\n  };\n  var _getSpringOptions = getSpringOptions(options),\n    stiffness = _getSpringOptions.stiffness,\n    damping = _getSpringOptions.damping,\n    mass = _getSpringOptions.mass,\n    velocity = _getSpringOptions.velocity,\n    duration = _getSpringOptions.duration,\n    isResolvedFromDuration = _getSpringOptions.isResolvedFromDuration;\n  var resolveSpring = zero;\n  var initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n  var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n  function createSpring() {\n    var initialDelta = target - origin;\n    var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n    /**\n     * If we're working within what looks like a 0-1 range, change the default restDelta\n     * to 0.01\n     */\n    if (restDelta === undefined) {\n      restDelta = Math.min(Math.abs(target - origin) / 100, 0.4);\n    }\n    if (dampingRatio < 1) {\n      var angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n      // Underdamped spring\n      resolveSpring = function resolveSpring(t) {\n        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n      };\n    } else if (dampingRatio === 1) {\n      // Critically damped spring\n      resolveSpring = function resolveSpring(t) {\n        return target - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);\n      };\n    } else {\n      // Overdamped spring\n      var dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n      resolveSpring = function resolveSpring(t) {\n        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        // When performing sinh or cosh values can hit Infinity so we cap them here\n        var freqForT = Math.min(dampedAngularFreq * t, 300);\n        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;\n      };\n    }\n  }\n  createSpring();\n  return {\n    next: function next(t) {\n      var current = resolveSpring(t);\n      if (!isResolvedFromDuration) {\n        var currentVelocity = initialVelocity;\n        if (t !== 0) {\n          /**\n           * We only need to calculate velocity for under-damped springs\n           * as over- and critically-damped springs can't overshoot, so\n           * checking only for displacement is enough.\n           */\n          if (dampingRatio < 1) {\n            var prevT = Math.max(0, t - velocitySampleDuration);\n            currentVelocity = velocityPerSecond(current - resolveSpring(prevT), t - prevT);\n          } else {\n            currentVelocity = 0;\n          }\n        }\n        var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        var isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n      } else {\n        state.done = t >= duration;\n      }\n      state.value = state.done ? target : current;\n      return state;\n    },\n    flipTarget: function flipTarget() {\n      initialVelocity = -initialVelocity;\n      var _ref2 = [target, origin];\n      origin = _ref2[0];\n      target = _ref2[1];\n      createSpring();\n    }\n  };\n}\nspring.needsInterpolation = function (a, b) {\n  return typeof a === \"string\" || typeof b === \"string\";\n};\nvar zero = function zero(_t) {\n  return 0;\n};\nexport { spring };","map":{"version":3,"names":["findSpring","calcAngularFreq","velocityPerSecond","durationKeys","physicsKeys","isSpringType","options","keys","some","key","undefined","getSpringOptions","springOptions","velocity","stiffness","damping","mass","isResolvedFromDuration","derived","velocitySampleDuration","spring","keyframes","restSpeed","restDelta","origin","target","length","state","done","value","duration","resolveSpring","zero","initialVelocity","dampingRatio","Math","sqrt","createSpring","initialDelta","undampedAngularFreq","min","abs","angularFreq","t","envelope","exp","sin","cos","dampedAngularFreq","freqForT","sinh","cosh","next","current","currentVelocity","prevT","max","isBelowVelocityThreshold","isBelowDisplacementThreshold","flipTarget","needsInterpolation","a","b","_t"],"sources":["/Users/gowtham/Documents/GitHub/myportfolio/node_modules/framer-motion/dist/es/animation/legacy-popmotion/spring.mjs"],"sourcesContent":["import { findSpring, calcAngularFreq } from './find-spring.mjs';\nimport { velocityPerSecond } from '../../utils/velocity-per-second.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nconst velocitySampleDuration = 5;\n/**\n * This is based on the spring implementation of Wobble https://github.com/skevy/wobble\n */\nfunction spring({ keyframes, restSpeed = 2, restDelta = 0.01, ...options }) {\n    let origin = keyframes[0];\n    let target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    let resolveSpring = zero;\n    let initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    function createSpring() {\n        const initialDelta = target - origin;\n        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n        /**\n         * If we're working within what looks like a 0-1 range, change the default restDelta\n         * to 0.01\n         */\n        if (restDelta === undefined) {\n            restDelta = Math.min(Math.abs(target - origin) / 100, 0.4);\n        }\n        if (dampingRatio < 1) {\n            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n            // Underdamped spring\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (target -\n                    envelope *\n                        (((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) /\n                            angularFreq) *\n                            Math.sin(angularFreq * t) +\n                            initialDelta * Math.cos(angularFreq * t)));\n            };\n        }\n        else if (dampingRatio === 1) {\n            // Critically damped spring\n            resolveSpring = (t) => target -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta +\n                        (initialVelocity + undampedAngularFreq * initialDelta) *\n                            t);\n        }\n        else {\n            // Overdamped spring\n            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                // When performing sinh or cosh values can hit Infinity so we cap them here\n                const freqForT = Math.min(dampedAngularFreq * t, 300);\n                return (target -\n                    (envelope *\n                        ((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) *\n                            Math.sinh(freqForT) +\n                            dampedAngularFreq *\n                                initialDelta *\n                                Math.cosh(freqForT))) /\n                        dampedAngularFreq);\n            };\n        }\n    }\n    createSpring();\n    return {\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        const prevT = Math.max(0, t - velocitySampleDuration);\n                        currentVelocity = velocityPerSecond(current - resolveSpring(prevT), t - prevT);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n        flipTarget: () => {\n            initialVelocity = -initialVelocity;\n            [origin, target] = [target, origin];\n            createSpring();\n        },\n    };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = (_t) => 0;\n\nexport { spring };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}